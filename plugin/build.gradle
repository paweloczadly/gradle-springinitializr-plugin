plugins {
    id 'java-gradle-plugin'
    id 'groovy'
    id 'codenarc'
    id 'jacoco'

    id 'com.gradle.plugin-publish' version libs.versions.pluginPublish
}

group = 'io.oczadly'
version = '0.0.1'

repositories {
    mavenCentral()
}

testing {
    suites {
        test {
            useSpock libs.versions.spock.get()
        }

        functionalTest(JvmTestSuite) {
            useSpock libs.versions.spock.get()

            dependencies {
                implementation project()

                implementation "io.spring.initializr:initializr-web:${libs.versions.initializr.get()}:stubs"
                implementation libs.wiremock.jre8
            }

            targets {
                all {
                    testTask.configure { shouldRunAfter(test) }
                }
            }
        }
    }
}

gradlePlugin {
    website = 'https://github.com/paweloczadly/gradle-springinitializr-plugin'
    vcsUrl = 'https://github.com/paweloczadly/gradle-springinitializr-plugin'

    plugins {
        springinitializr {
            id = 'io.oczadly.springinitializr'
            implementationClass = 'io.oczadly.SpringInitializrPlugin'
            displayName = 'Gradle Spring Initializr plugin'
            description = 'Gradle plugin for bootstrapping Spring Boot projects using Spring Initializr.'
            tags.set(['spring', 'spring-boot', 'spring-initializr'])
        }
    }
}

gradlePlugin.testSourceSets.add sourceSets.functionalTest

tasks.named('check') {
    dependsOn jacocoTestCoverageVerification
}

codenarc {
    toolVersion = libs.versions.codenarc.get()
    configFile = file "${rootDir}/config/codenarc/rules.groovy"
}

sourceSets {
    functionalTest {
        resources.srcDir file('src/main/resources')
    }
}

jacoco {
    toolVersion = libs.versions.jacoco.get()
}

jacocoTestReport {
    dependsOn test, testing.suites.functionalTest
    executionData fileTree(layout.buildDirectory).include('**/jacoco/*.exec')
    sourceDirectories.from sourceSets.main.allSource
    classDirectories.from sourceSets.main.output
    reports {
        xml.required = true
        html.required = true
    }
}

tasks.named('functionalTest') {
    jacoco {
        enabled = true
        destinationFile = layout.buildDirectory.file('jacoco/functionalTest.exec').get().asFile
    }
}

jacocoTestCoverageVerification {
    dependsOn jacocoTestReport
    executionData fileTree(layout.buildDirectory).include('**/jacoco/*.exec')

    violationRules {
        rule {
            element = 'CLASS'
            includes = [
                    'io.oczadly.SpringInitializrPlugin',
                    'io.oczadly.tasks.InitSpringBootProjectTask',
                    'io.oczadly.internal.generator.InteractivePrompter',
                    'io.oczadly.internal.config.PluginConstants',
            ]
            limit {
                value = 'COVEREDRATIO'
                minimum = 0.0
            }
        }
        rule {
            element = 'CLASS'
            includes = [
                    'io.oczadly.internal.config.PluginConfig',
                    'io.oczadly.internal.generator.MetadataService',
                    'io.oczadly.internal.generator.SpringBootProjectGenerator',
                    'io.oczadly.internal.generator.SpringInitializrParamsBuilder',
                    'io.oczadly.internal.utils.*',
            ]
            limit {
                value = 'COVEREDRATIO'
                minimum = 0.8
            }
        }
    }
}
